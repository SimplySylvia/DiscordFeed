generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  discordId         String              @unique
  username          String
  email             String?             @unique
  image             String?
  accessToken       String?             @map("access_token")
  refreshToken      String?             @map("refresh_token")
  expiresAt         DateTime?           @map("expires_at")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  userPreferences   UserPreference?
  servers           ServerUser[]
  lastReads         LastRead[]

  @@map("users")
}

model DiscordServer {
  id          String           @id
  name        String
  icon        String?
  members     ServerUser[]
  channels    DiscordChannel[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  @@map("discord_servers")
}

model ServerUser {
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @map("user_id")
  server      DiscordServer @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId    String        @map("server_id")

  @@id([userId, serverId])
  @@map("server_users")
}

model DiscordChannel {
  id          String          @id
  name        String
  type        Int
  server      DiscordServer   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId    String          @map("server_id")
  parentId    String?         @map("parent_id")
  position    Int
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  lastReads   LastRead[]

  @@map("discord_channels")
}

model LastRead {
  id          String          @id @default(cuid())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String          @map("user_id")
  channel     DiscordChannel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   String          @map("channel_id")
  lastReadAt  DateTime        @map("last_read_at")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@unique([userId, channelId])
  @@map("last_reads")
}

model UserPreference {
  id                    String  @id @default(cuid())
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String  @unique @map("user_id")
  refreshInterval       Int     @default(300) @map("refresh_interval") // in seconds
  showUnreadOnly        Boolean @default(true) @map("show_unread_only")
  notificationsEnabled  Boolean @default(true) @map("notifications_enabled")
  theme                 String  @default("system")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("user_preferences")
}
