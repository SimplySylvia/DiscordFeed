generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(cuid())
  discordId         String              @unique
  username          String
  email             String?             @unique
  image             String?
  accessToken       String?             @map("access_token")
  refreshToken      String?             @map("refresh_token")
  expiresAt         DateTime?           @map("expires_at")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  userPreferences   UserPreference?
  servers           ServerUser[]
  lastReads         LastRead[]
  accounts          Account[]
  sessions          Session[]

  @@map("users")
}

model DiscordServer {
  id          String           @id
  name        String
  icon        String?
  members     ServerUser[]
  channels    DiscordChannel[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  @@map("discord_servers")
}

model ServerUser {
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String        @map("user_id")
  server      DiscordServer @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId    String        @map("server_id")

  @@id([userId, serverId])
  @@map("server_users")
}

model DiscordChannel {
  id          String          @id
  name        String
  type        Int
  server      DiscordServer   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId    String          @map("server_id")
  parentId    String?         @map("parent_id")
  position    Int
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  lastReads   LastRead[]
  messages    MessageCache[]

  @@map("discord_channels")
}

model LastRead {
  id          String          @id @default(cuid())
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String          @map("user_id")
  channel     DiscordChannel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId   String          @map("channel_id")
  lastReadAt  DateTime        @map("last_read_at")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@unique([userId, channelId])
  @@map("last_reads")
}

model UserPreference {
  id                    String  @id @default(cuid())
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String  @unique @map("user_id")
  refreshInterval       Int     @default(300) @map("refresh_interval") // in seconds
  showUnreadOnly        Boolean @default(true) @map("show_unread_only")
  notificationsEnabled  Boolean @default(true) @map("notifications_enabled")
  theme                 String  @default("system")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@map("user_preferences")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @db.Text
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model MessageCache {
  id            String         @id @default(cuid())
  discordMsgId  String         @unique @map("discord_msg_id")
  channel       DiscordChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId     String         @map("channel_id")
  authorId      String         @map("author_id")
  content       String
  timestamp     DateTime
  isRead        Boolean        @default(false) @map("is_read")
  attachments   Json?
  embeds        Json?
  reactions     Json?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
}

model WebhookEvent {
  id          String   @id @default(cuid())
  eventId     String   @unique @map("event_id")
  type        String
  payload     Json
  receivedAt  DateTime @default(now()) @map("received_at")
  processedAt DateTime? @map("processed_at")
  status      String
}